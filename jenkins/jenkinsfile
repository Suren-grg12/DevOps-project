pipeline {
    agent any

    environment {
        // 1. GitHub Configuration (MUST match exactly)
        REPO_URL = 'https://github.com/Suren-grg12/air-quality-app.git'
        CREDENTIALS_ID = 'github-pat' // Exact credential ID from Jenkins
        
        // 2. Build Configuration
        NODE_VERSION = '22.15.1'
        APP_NAME = 'air-quality-app'
        
        // 3. SonarQube Configuration (verify in Jenkins → Manage Jenkins → Configure System)
        SONARQUBE_SERVER = 'SonarQube' 
        SONAR_SCANNER = tool 'sonar-scanner' // Case-sensitive tool name
        SONAR_HOST_URL = 'http://192.168.33.11:9000'
    }

    tools {
        nodejs "${NODE_VERSION}"
    }

    stages {
        // STAGE 1: SECURE CHECKOUT (100% working authentication)
        stage('Checkout') {
            steps {
                script {
                    try {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            extensions: [[
                                $class: 'CleanBeforeCheckout'
                            ]],
                            userRemoteConfigs: [[
                                url: env.REPO_URL,
                                credentialsId: env.CREDENTIALS_ID,
                                refspec: '+refs/heads/*:refs/remotes/origin/*'
                            ]]
                        ])
                        sh 'git config --global http.sslVerify true' // Fix SSL issues
                        echo "✅ Checkout successful - Commit: ${sh(returnStdout: true, script: 'git rev-parse HEAD').trim()}"
                    } catch (err) {
                        echo "❌ Checkout failed: ${err}"
                        sh '''
                            echo "--- DEBUG INFO ---"
                            git --version
                            env | grep -E 'GIT|JENKINS|SONAR'
                        '''
                        error("Checkout failed - verify:\n1. Credential ID '${env.CREDENTIALS_ID}' exists\n2. PAT has 'repo' scope\n3. Repository exists at ${env.REPO_URL}")
                    }
                }
            }
        }

        // STAGE 2: INSTALL WITH SECURITY
        stage('Install') {
            steps {
                sh '''
                    npm config set ignore-scripts true
                    npm ci --audit --omit=dev
                    npm config set ignore-scripts false
                '''
            }
        }

        // STAGE 3: QUALITY CHECKS
        stage('Test') {
            steps {
                sh 'npm test -- --ci --reporters=default --reporters=jest-junit'
            }
            post {
                always {
                    junit '**/junit.xml'
                    archiveArtifacts 'coverage/**/*'
                }
            }
        }

        // STAGE 4: SONARQUBE ANALYSIS (with auth)
        stage('SonarScan') {
            steps {
                withSonarQubeEnv(env.SONARQUBE_SERVER) {
                    sh """
                    ${env.SONAR_SCANNER}/bin/sonar-scanner \
                        -Dsonar.login=${SONAR_AUTH_TOKEN} \
                        -Dsonar.projectKey=${env.APP_NAME} \
                        -Dsonar.projectName=${env.APP_NAME} \
                        -Dsonar.sources=. \
                        -Dsonar.exclusions=node_modules/**,public/**,views/** \
                        -Dsonar.javascript.node.executable=${env.NODEJS_HOME}/bin/node
                    """
                }
            }
        }

        // STAGE 5: ENFORCE QUALITY GATE
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // STAGE 6: BUILD ARTIFACT
        stage('Build') {
            steps {
                sh 'npm run build'
                archiveArtifacts artifacts: 'dist/**,bin/**', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Build #${currentBuild.number} (${env.APP_NAME})"
            }
        }
        success {
            slackSend(color: 'good', message: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(color: 'danger', 
                message: "FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                "Check: ${env.BUILD_URL}console\n" +
                "Error: ${currentBuild.rawBuild.getLog(100).join('\n').find(/ERROR:.*/)}"
            )
        }
    }
}