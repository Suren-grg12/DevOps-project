pipeline {
    agent any

    environment {
        // App Config
        APP_NAME = "AQI"
        NODE_VERSION = "22.15.1"
        
        // SonarQube Config
        SONARQUBE_SCANNER_HOME = tool 'SonarScanner'
        SONARQUBE_SERVER = "SonarQube"
        SONAR_HOST_URL = "http://192.168.33.11:9000"
        
        // GitHub Config (Change to SSH if using Option 2)
        REPO_URL = 'https://github.com/Suren-grg12/air-quality-app.git'
        CREDENTIALS_ID = 'github-pat' // or 'github-ssh' for SSH
    }

    tools {
        nodejs "${NODE_VERSION}"
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: env.REPO_URL,
                    credentialsId: env.CREDENTIALS_ID,
                    branch: 'main'
                )
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci --ignore-scripts'
            }
        }

        stage('Test') {
            steps {
                sh 'npm test'
            }
            post {
                always {
                    junit '**/test-results.xml'
                    archiveArtifacts 'coverage/**/*'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                    ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.projectKey=${APP_NAME} \
                        -Dsonar.projectName=${APP_NAME} \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=. \
                        -Dsonar.inclusions=**/*.js \
                        -Dsonar.exclusions=node_modules/**,public/**,views/** \
                        -Dsonar.javascript.node.executable=${env.NODEJS_HOME}/bin/node
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
                archiveArtifacts artifacts: 'public/**/*,bin/**/*', excludes: '**/*.map'
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline succeeded!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs."
        }
    }
}