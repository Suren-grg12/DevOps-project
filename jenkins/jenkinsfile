pipeline {
    agent any

    environment {
        // Application Config
        APP_NAME = "AQI"
        NODE_VERSION = "22.15.1"  // Your Node.js version
        
        // SonarQube Config (from your properties)
        SONARQUBE_SCANNER_HOME = tool 'SonarScanner'  // Must match Jenkins tool name
        SONARQUBE_SERVER = "SonarQube"  // Jenkins-configured SonarQube server
        SONAR_HOST_URL = "http://192.168.33.11:9000"  // Your SonarQube server
        PROJECT_BASE_DIR = "${WORKSPACE}"  // Jenkins workspace path
    }

    tools {
        nodejs "${NODE_VERSION}"  // Node.js installation in Jenkins
    }

    stages {
        // Stage 1: Checkout Code
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Stage 2: Install Dependencies
        stage('Install Dependencies') {
            steps {
                sh 'npm ci --ignore-scripts'  // Skip post-install scripts for security
            }
        }

        // Stage 3: Run Tests & Coverage
        stage('Test') {
            steps {
                sh 'npm test'
            }
            post {
                always {
                    junit '**/test-results.xml'  // Publish test results
                    archiveArtifacts 'coverage/**/*'  // Archive coverage reports
                }
            }
        }

        // Stage 4: SonarQube Analysis (Customized for your properties)
        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                    ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.projectKey=${APP_NAME} \
                        -Dsonar.projectName=${APP_NAME} \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.language=js \
                        -Dsonar.sources=. \
                        -Dsonar.inclusions=**/*.js \
                        -Dsonar.exclusions=node_modules/**,public/**,views/** \
                        -Dsonar.projectBaseDir=${PROJECT_BASE_DIR} \
                        -Dsonar.javascript.node.executable=${env.NODEJS_HOME}/bin/node
                    """
                }
            }
        }

        // Stage 5: Quality Gate (Block if SonarQube fails)
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true  // Fail build on Quality Gate failure
                }
            }
        }

        // Stage 6: Build (Exclude unnecessary files)
        stage('Build') {
            steps {
                sh 'npm run build'
                archiveArtifacts artifacts: 'public/**/*,bin/**/*', excludes: '**/*.map,node_modules/**'
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline succeeded! SonarQube Quality Gate passed."
        }
        failure {
            echo "❌ Pipeline failed. Check SonarQube dashboard or test reports."
        }
    }
}